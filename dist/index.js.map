{"version":3,"sources":["../src/index.ts","../src/constants.ts","../src/utils.ts"],"sourcesContent":["import type { ShareProps } from './types'\nimport { socialBase, toQueryString } from './utils'\n\ninterface TwitterSharingProps extends ShareProps {\n\t/**\n\t * The `url` parameter contains an absolute HTTP or HTTPS URL to be shared on Twitter.\n\t */\n\turl: string\n\t/**\n\t * A `text` parameter appears pre-selected in a Tweet composer.\n\t *\n\t * The `text` parameter may be auto-populated from the webpage’s `<title>` element if not explicitly set.\n\t */\n\ttext?: string\n\t/**\n\t * List of hashtags to be appended to the Tweet. Omit a preceding “#” from each hashtag; the Tweet composer will automatically add the proper space-separated hashtag by language.\n\t *\n\t * @example\n\t * ```ts\n\t * hashtags: ['hello', 'world']\n\t * ```\n\t */\n\thashtags?: string[]\n\t/**\n\t * Attribute the source of a Tweet to a Twitter username. The attribution will appear in a Tweet as \"via {@link @}`username`\" translated into the language of the Tweet author.\n\t *\n\t * @example\n\t * ```ts\n\t * via: 'username'\n\t * ```\n\t */\n\tvia?: string\n}\n/**\n * Share on Twitter.\n *\n * [Reference](https://developer.twitter.com/en/docs/twitter-for-websites/tweet-button/overview)\n */\nconst twitter = (props: TwitterSharingProps) => socialBase(props, 'twitter')\n\ninterface FacebookSharingProps extends ShareProps {\n\t/**\n\t * Not supported by Facebook. Equivalent to `u`.\n\t */\n\turl: string\n\t/**\n\t * URL to share. This attribute has priority over `url`.\n\t */\n\tu?: string\n}\n/**\n * Share on Facebook.\n *\n * [Reference](https://developers.facebook.com/docs/plugins/share-button/)\n */\nconst facebook = (props: FacebookSharingProps) => {\n\tconst params = {\n\t\t...props,\n\t\tu: props.u ?? props.url,\n\t\turl: undefined,\n\t\ttext: undefined\n\t}\n\treturn socialBase(params, 'facebook')\n}\n\ninterface TelegramSharingProps extends ShareProps {\n\t/**\n\t * The URL the user will be sharing.\n\t */\n\turl: string\n\t/**\n\t * Optional description that will be included with the link.\n\t */\n\ttext?: string\n}\n/**\n * Share on Telegram.\n *\n * [Reference](https://core.telegram.org/widgets/share#custom-buttons)\n */\nconst telegram = (props: TelegramSharingProps) => socialBase(props, 'telegram')\n\ninterface WhatsappSharingProps extends ShareProps {\n\t/**\n\t * Not supported by WhatsApp. See `text`.\n\t */\n\turl: string\n\t/**\n\t * Pre-filled text for the message. Added to `url`.\n\t *\n\t * @example\n\t * ```ts\n\t * url: 'https://google.com'\n\t * text: 'Hello, world!'\n\t * // 'Hello, world! https://google.com'\n\t * ```\n\t */\n\ttext?: string\n}\n/**\n * Share on WhatsApp.\n *\n * [Reference](https://faq.whatsapp.com/5913398998672934/?locale=en_US)\n */\nconst whatsapp = (props: WhatsappSharingProps) => {\n\tconst params = {\n\t\t...props,\n\t\ttext: props.text ? `${props.text} ${props.url}` : props.url\n\t}\n\treturn socialBase(params, 'whatsapp')\n}\n\ninterface RedditSharingProps extends ShareProps {\n\t/**\n\t * Not supported by Reddit. Equivalent to `title`.\n\t */\n\ttext?: string\n\t/**\n\t * Post title. This attribute has priority over `text`.\n\t */\n\ttitle?: string\n}\n/**\n * Share on Reddit.\n *\n * [Reference](https://github.com/bradvin/social-share-urls?tab=readme-ov-file#-reddit)\n */\nconst reddit = (props: RedditSharingProps) => {\n\tconst params = {\n\t\t...props,\n\t\ttitle: props.title ?? props.text\n\t}\n\treturn socialBase(params, 'reddit')\n}\n\ninterface LinkedInSharingProps extends ShareProps {\n\t/**\n\t * This attribute is not **officially** supported by LinkedIn, but it works.\n\t */\n\ttext?: string\n}\n/**\n * Share on LinkedIn.\n *\n * [Reference](https://stackoverflow.com/questions/33426752/linkedin-share-post-url)\n */\nconst linkedin = (props: LinkedInSharingProps) => {\n\tconst params = {\n\t\t...props\n\t}\n\treturn socialBase(params, 'linkedin')\n}\n\ninterface TumblrSharingProps extends ShareProps {\n\t/**\n\t * Not supported by Tumblr. Equivalent to `canonicalUrl`.\n\t */\n\turl: string\n\t/**\n\t * Not supported by Tumblr. Equivalent to `caption`.\n\t */\n\ttext?: string\n\t/**\n\t * Canonical URL of the page. This attribute has priority over `url`.\n\t */\n\tcanonicalUrl?: string\n\t/**\n\t * The main content of the post.\n\t *\n\t * In practice it doesn't work.\n\t */\n\tcontent?: string\n\t/**\n\t * The title of the post.\n\t *\n\t * In practice it doesn't work.\n\t */\n\ttitle?: string\n\t/**\n\t * A description of the link.\n\t *\n\t * In practice it doesn't work.\n\t */\n\tcaption?: string\n\t/**\n\t * A list of tags to apply to the post.\n\t *\n\t * In practice it doesn't work.\n\t */\n\ttags?: string[]\n}\n/**\n * Share on Tumblr.\n *\n * [Reference](https://www.tumblr.com/docs/en/share_button)\n */\nconst tumblr = (props: TumblrSharingProps) => {\n\tconst params = {\n\t\t...props,\n\t\tposttype: 'link',\n\t\tcanonicalUrl: props.canonicalUrl ?? props.url,\n\t\tcontent: props.text ?? props.caption\n\t}\n\treturn socialBase(params, 'tumblr')\n}\n\ninterface GmailSharingProps extends ShareProps {\n\t/**\n\t * Not supported by Gmail. See `body`.\n\t */\n\turl: string\n\t/**\n\t * The subject of the email. Equivalent to `body`.\n\t */\n\ttext?: string\n\t/**\n\t * The body of the email.\n\t *\n\t * This attribute has priority over `text`.\n\t *\n\t * Added to `url`.\n\t *\n\t * @example\n\t * ```ts\n\t * url: 'https://google.com'\n\t * body: 'Hello, world!'\n\t * // 'Hello, world! https://google.com'\n\t * ```\n\t */\n\tbody?: string\n\t/**\n\t * The email address of the recipient.\n\t */\n\tto?: string\n\t/**\n\t * Not supported by Gmail. Equivalent to `su`.\n\t */\n\tsubject?: string\n\t/**\n\t * The subject of the email. This attribute has priority over `subject`.\n\t */\n\tsu?: string\n\t/**\n\t * Email Blind-Carbon Copy.\n\t */\n\tbcc?: string\n\t/**\n\t * Email Carbon Copy address\n\t */\n\tcc?: string\n}\n/**\n * Share on Gmail.\n *\n * [Reference](https://stackoverflow.com/questions/20956206/is-the-mail-google-com-api-documented/56782038#56782038).\n */\nconst gmail = (props: GmailSharingProps) => {\n\tconst params = {\n\t\t...props,\n\t\tview: 'cm',\n\t\tbody: `${props.body ?? props.text} ${props.url}`,\n\t\tsu: props.su ?? props.subject,\n\t\turl: undefined,\n\t\ttext: undefined\n\t}\n\treturn socialBase(params, 'gmail')\n}\n\ninterface MailtoSharingProps extends ShareProps {\n\t/**\n\t * Not supported by Mailto. See `body`.\n\t */\n\turl: string\n\t/**\n\t * The email address of the recipient.\n\t */\n\temailAddress?: string\n\t/**\n\t * Not supported by Mailto. Equivalent to `body`.\n\t */\n\ttext?: string\n\t/**\n\t * The subject of the email.\n\t */\n\tsubject?: string\n\t/**\n\t * The body of the email.\n\t *\n\t * This attribute has priority over `text`.\n\t *\n\t * Added to `url`.\n\t *\n\t * @example\n\t * ```ts\n\t * url: 'https://google.com'\n\t * body: 'Hello, world!'\n\t * // 'Hello, world! https://google.com'\n\t * ```\n\t */\n\tbody?: string\n}\n/**\n * Share by email.\n *\n * [Reference](https://www.ietf.org/rfc/rfc2368.txt).\n */\nconst mailto = (props: MailtoSharingProps) => {\n\tconst params = {\n\t\t...props,\n\t\tbody: `${props.body ?? props.text} ${props.url}`,\n\t\temailAddress: undefined\n\t}\n\treturn `mailto:{${props.emailAddress}}?${toQueryString(params)}`\n}\n\ninterface PocketSharingProps extends ShareProps {\n\t/**\n\t * URL to save.\n\t */\n\turl: string\n\t/**\n\t * Not supported by Pocket.\n\t * @deprecated\n\t */\n\ttext?: string\n}\n/**\n * Save on Pocket.\n *\n * [Reference](https://getpocket.com/publisher/button_docs)\n */\nconst pocket = (props: PocketSharingProps) => socialBase(props, 'pocket')\n\nexport {\n\ttwitter,\n\tfacebook,\n\ttelegram,\n\twhatsapp,\n\treddit,\n\tlinkedin,\n\ttumblr,\n\tgmail,\n\tmailto,\n\tpocket\n}\n\nconst init = () => {\n\tlet windowObjectReference: Window | null = null\n\tfunction openRequestedTab(url: string, windowName: string) {\n\t\tif (windowObjectReference === null || windowObjectReference.closed) {\n\t\t\twindowObjectReference = window.open(\n\t\t\t\turl,\n\t\t\t\twindowName,\n\t\t\t\t'popup,width=600,height=600'\n\t\t\t)\n\t\t} else {\n\t\t\twindowObjectReference.focus()\n\t\t}\n\t}\n\tconst links = document.querySelectorAll<HTMLLinkElement>('a[open-win]')\n\tfor (let link of links) {\n\t\tlink.removeAttribute('target')\n\t\tlink.addEventListener(\n\t\t\t'click',\n\t\t\t(e) => {\n\t\t\t\topenRequestedTab(link.href, '_blank')\n\t\t\t\te.preventDefault()\n\t\t\t},\n\t\t\tfalse\n\t\t)\n\t}\n}\n\nif (typeof window !== 'undefined') {\n\tdocument.addEventListener('DOMContentLoaded', init)\n}\n","export const SOCIAL_URLS = {\n\ttwitter: 'https://twitter.com/intent/tweet',\n\tfacebook: 'https://www.facebook.com/sharer/sharer.php',\n\ttelegram: 'https://t.me/share/url',\n\twhatsapp: 'https://wa.me/',\n\treddit: 'https://reddit.com/submit',\n\tlinkedin: 'https://www.linkedin.com/sharing/share-offsite',\n\ttumblr: 'https://www.tumblr.com/widgets/share/tool',\n\tgmail: 'https://mail.google.com/mail',\n\tpocket: 'https://getpocket.com/edit'\n}\n","import { SOCIAL_URLS } from './constants'\n\nexport const toQueryString = (params: Record<string, any>) => {\n\tconst query = new URLSearchParams()\n\tfor (const [key, value] of Object.entries(params)) {\n\t\tif (value) query.set(key, `${value}`)\n\t}\n\treturn query.toString()\n}\n\nexport const socialBase = <T extends Object>(\n\tqueryParams: T,\n\tsocialBaseUrl: keyof typeof SOCIAL_URLS\n) => {\n\tconst params = toQueryString({ ...queryParams })\n\treturn `${SOCIAL_URLS[socialBaseUrl]}?${params.toString()}`\n}\n"],"mappings":"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","names":[]}